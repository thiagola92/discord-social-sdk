# TODO: Automatic extract informations from C files.
# TODO: Careful about methods having the same name as used in Godot ("connect()" in godot is used by signals)

CLASSES = {}
CALLBACKS_ARGS = {}


def get_classes() -> dict:
    global CLASSES

    if CLASSES != {}:
        return CLASSES

    CLASSES = {
        "Activity": [
            "std::string 	Name () const",
            "void 	SetName (std::string Name)",
            "discordpp::ActivityTypes 	Type () const",
            "void 	SetType (discordpp::ActivityTypes Type)",
            "std::optional< std::string > 	State () const",
            "void 	SetState (std::optional< std::string > State)",
            "std::optional< std::string > 	Details () const",
            "void 	SetDetails (std::optional< std::string > Details)",
            "std::optional< uint64_t > 	ApplicationId () const",
            "void 	SetApplicationId (std::optional< uint64_t > ApplicationId)",
            "std::optional< discordpp::ActivityAssets > 	Assets () const",
            "void 	SetAssets (std::optional< discordpp::ActivityAssets > Assets)",
            "std::optional< discordpp::ActivityTimestamps > 	Timestamps () const",
            "void 	SetTimestamps (std::optional< discordpp::ActivityTimestamps > Timestamps)",
            "std::optional< discordpp::ActivityParty > 	Party () const",
            "void 	SetParty (std::optional< discordpp::ActivityParty > Party)",
            "std::optional< discordpp::ActivitySecrets > 	Secrets () const",
            "void 	SetSecrets (std::optional< discordpp::ActivitySecrets > Secrets)",
            "discordpp::ActivityGamePlatforms 	SupportedPlatforms () const",
            "void 	SetSupportedPlatforms (discordpp::ActivityGamePlatforms SupportedPlatforms)",
        ],
        "ActivityAssets": [
            "std::optional< std::string > 	LargeImage () const",
            "void 	SetLargeImage (std::optional< std::string > LargeImage)",
            "std::optional< std::string > 	LargeText () const",
            "void 	SetLargeText (std::optional< std::string > LargeText)",
            "std::optional< std::string > 	SmallImage () const",
            "void 	SetSmallImage (std::optional< std::string > SmallImage)",
            "std::optional< std::string > 	SmallText () const",
            "void 	SetSmallText (std::optional< std::string > SmallText)",
        ],
        "ActivityInvite": [
            "uint64_t 	SenderId () const",
            "void 	SetSenderId (uint64_t SenderId)",
            "uint64_t 	ChannelId () const",
            "void 	SetChannelId (uint64_t ChannelId)",
            "uint64_t 	MessageId () const",
            "void 	SetMessageId (uint64_t MessageId)",
            "discordpp::ActivityActionTypes 	Type () const",
            "void 	SetType (discordpp::ActivityActionTypes Type)",
            "uint64_t 	ApplicationId () const",
            "void 	SetApplicationId (uint64_t ApplicationId)",
            "std::string 	PartyId () const",
            "void 	SetPartyId (std::string PartyId)",
            "bool 	IsValid () const",
            "void 	SetIsValid (bool IsValid)",
        ],
        "ActivityParty": [
            "std::string 	Id () const",
            "void 	SetId (std::string Id)",
            "int32_t 	CurrentSize () const",
            "void 	SetCurrentSize (int32_t CurrentSize)",
            "int32_t 	MaxSize () const",
            "void 	SetMaxSize (int32_t MaxSize)",
            "discordpp::ActivityPartyPrivacy 	Privacy () const",
            "void 	SetPrivacy (discordpp::ActivityPartyPrivacy Privacy)",
        ],
        "ActivitySecrets": [
            "std::string 	Join () const",
            "void 	SetJoin (std::string Join)",
        ],
        "ActivityTimestamps": [
            "uint64_t 	Start () const",
            "void 	SetStart (uint64_t Start)",
            "uint64_t 	End () const",
            "void 	SetEnd (uint64_t End)",
        ],
        "AdditionalContent": [
            "bool 	Equals (discordpp::AdditionalContent rhs) const",
            "discordpp::AdditionalContentType 	Type () const",
            "void 	SetType (discordpp::AdditionalContentType Type)",
            "std::optional< std::string > 	Title () const",
            "void 	SetTitle (std::optional< std::string > Title)",
            "uint8_t 	Count () const",
            "void 	SetCount (uint8_t Count)",
        ],
        "AudioDevice": [
            "bool 	Equals (discordpp::AudioDevice rhs)",
            "std::string 	Id () const",
            "void 	SetId (std::string Id)",
            "std::string 	Name () const",
            "void 	SetName (std::string Name)",
            "bool 	IsDefault () const",
            "void 	SetIsDefault (bool IsDefault)",
        ],
        "AuthorizationArgs": [
            "uint64_t 	ClientId () const",
            "void 	SetClientId (uint64_t ClientId)",
            "std::string 	Scopes () const",
            "void 	SetScopes (std::string Scopes)",
            "std::optional< std::string > 	State () const",
            "void 	SetState (std::optional< std::string > State)",
            "std::optional< std::string > 	Nonce () const",
            "void 	SetNonce (std::optional< std::string > Nonce)",
            "std::optional< discordpp::AuthorizationCodeChallenge > 	CodeChallenge () const",
            "void 	SetCodeChallenge (std::optional< discordpp::AuthorizationCodeChallenge > CodeChallenge)",
        ],
        "AuthorizationCodeChallenge": [
            "discordpp::AuthenticationCodeChallengeMethod 	Method () const",
            "void 	SetMethod (discordpp::AuthenticationCodeChallengeMethod Method)",
            "std::string 	Challenge () const",
            "void 	SetChallenge (std::string Challenge)",
        ],
        "AuthorizationCodeVerifier": [
            "discordpp::AuthorizationCodeChallenge 	Challenge () const",
            "void 	SetChallenge (discordpp::AuthorizationCodeChallenge Challenge)",
            "std::string 	Verifier () const",
            "void 	SetVerifier (std::string Verifier)",
        ],
        "Call": [
            "discordpp::AudioModeType 	GetAudioMode ()",
            "uint64_t 	GetChannelId () const",
            "uint64_t 	GetGuildId () const",
            "bool 	GetLocalMute (uint64_t userId)",
            "std::vector< uint64_t > 	GetParticipants () const",
            "float 	GetParticipantVolume (uint64_t userId)",
            "bool 	GetPTTActive ()",
            "bool 	GetSelfDeaf ()",
            "bool 	GetSelfMute ()",
            "discordpp::Call::Status 	GetStatus () const",
            "discordpp::VADThresholdSettings 	GetVADThreshold () const",
            "std::optional< discordpp::VoiceStateHandle > 	GetVoiceStateHandle (uint64_t userId) const",
            "void 	SetAudioMode (discordpp::AudioModeType audioMode)",
            "void 	SetLocalMute (uint64_t userId, bool mute)",
            "void 	SetOnVoiceStateChangedCallback (discordpp::Call::OnVoiceStateChanged cb)",
            "void 	SetParticipantChangedCallback (discordpp::Call::OnParticipantChanged cb)",
            "void 	SetParticipantVolume (uint64_t userId, float volume)",
            "void 	SetPTTActive (bool active)",
            "void 	SetPTTReleaseDelay (uint32_t releaseDelayMs)",
            "void 	SetSelfDeaf (bool deaf)",
            "void 	SetSelfMute (bool mute)",
            "void 	SetSpeakingStatusChangedCallback (discordpp::Call::OnSpeakingStatusChanged cb)",
            "void 	SetStatusChangedCallback (discordpp::Call::OnStatusChanged cb)",
            "void 	SetVADThreshold (bool automatic, float threshold)",
        ],
        "CallInfoHandle": [
            "uint64_t 	ChannelId () const",
            "std::vector< uint64_t > 	GetParticipants () const",
            "std::optional< discordpp::VoiceStateHandle > 	GetVoiceStateHandle (uint64_t userId) const",
            "uint64_t 	GuildId () const",
        ],
        "ChannelHandle": [
            "uint64_t 	Id () const",
            "std::string 	Name () const",
            "std::vector< uint64_t > 	Recipients () const",
            "discordpp::ChannelType 	Type () const",
        ],
        "Client": [
            # Audio
            "void 	EndCall (uint64_t channelId, discordpp::Client::EndCallCallback callback)",
            "void 	EndCalls (discordpp::Client::EndCallsCallback callback)",
            "discordpp::Call 	GetCall (uint64_t channelId)",
            "std::vector< discordpp::Call > 	GetCalls ()",
            "void 	GetCurrentInputDevice (discordpp::Client::GetCurrentInputDeviceCallback cb)",
            "void 	GetCurrentOutputDevice (discordpp::Client::GetCurrentOutputDeviceCallback cb)",
            "void 	GetInputDevices (discordpp::Client::GetInputDevicesCallback cb)",
            "float 	GetInputVolume ()",
            "void 	GetOutputDevices (discordpp::Client::GetOutputDevicesCallback cb)",
            "float 	GetOutputVolume ()",
            "bool 	GetSelfDeafAll () const",
            "bool 	GetSelfMuteAll () const",
            "void 	SetAutomaticGainControl (bool on)",
            "void 	SetDeviceChangeCallback (discordpp::Client::DeviceChangeCallback callback)",
            "void 	SetEchoCancellation (bool on)",
            "void 	SetInputDevice (std::string deviceId, discordpp::Client::SetInputDeviceCallback cb)",
            "void 	SetInputVolume (float inputVolume)",
            "void 	SetNoAudioInputCallback (discordpp::Client::NoAudioInputCallback callback)",
            "void 	SetNoAudioInputThreshold (float dBFSThreshold)",
            "void 	SetNoiseSuppression (bool on)",
            "void 	SetOpusHardwareCoding (bool encode, bool decode)",
            "void 	SetOutputDevice (std::string deviceId, discordpp::Client::SetOutputDeviceCallback cb)",
            "void 	SetOutputVolume (float outputVolume)",
            "void 	SetSelfDeafAll (bool deaf)",
            "void 	SetSelfMuteAll (bool mute)",
            "bool 	SetSpeakerMode (bool speakerMode)",
            "void 	SetThreadPriority (discordpp::Client::Thread thread, int32_t priority)",
            "void 	SetVoiceParticipantChangedCallback (discordpp::Client::VoiceParticipantChangedCallback cb)",
            "bool 	ShowAudioRoutePicker ()",
            "discordpp::Call 	StartCall (uint64_t channelId)",
            "discordpp::Call 	StartCallWithAudioCallbacks (uint64_t lobbyId, discordpp::Client::UserAudioReceivedCallback receivedCb, discordpp::Client::UserAudioCapturedCallback capturedCb)",
            # Auth
            "void 	AbortAuthorize ()",
            "void 	AbortGetTokenFromDevice ()",
            "void 	Authorize (discordpp::AuthorizationArgs args, discordpp::Client::AuthorizationCallback callback)",
            "void 	CloseAuthorizeDeviceScreen ()",
            "discordpp::AuthorizationCodeVerifier 	CreateAuthorizationCodeVerifier ()",
            "void 	FetchCurrentUser (discordpp::AuthorizationTokenType tokenType, std::string const &token, discordpp::Client::FetchCurrentUserCallback callback)",
            "void 	GetProvisionalToken (uint64_t applicationId, discordpp::AuthenticationExternalAuthType externalAuthType, std::string const &externalAuthToken, discordpp::Client::TokenExchangeCallback callback)",
            "void 	GetToken (uint64_t applicationId, std::string const &code, std::string const &codeVerifier, std::string const &redirectUri, discordpp::Client::TokenExchangeCallback callback)",
            "void 	GetTokenFromDevice (discordpp::DeviceAuthorizationArgs args, discordpp::Client::TokenExchangeCallback callback)",
            "void 	GetTokenFromDeviceProvisionalMerge (discordpp::DeviceAuthorizationArgs args, discordpp::AuthenticationExternalAuthType externalAuthType, std::string const &externalAuthToken, discordpp::Client::TokenExchangeCallback callback)",
            "void 	GetTokenFromProvisionalMerge (uint64_t applicationId, std::string const &code, std::string const &codeVerifier, std::string const &redirectUri, discordpp::AuthenticationExternalAuthType externalAuthType, std::string const &externalAuthToken, discordpp::Client::TokenExchangeCallback callback)",
            "bool 	IsAuthenticated ()",
            "void 	OpenAuthorizeDeviceScreen (uint64_t clientId, std::string const &userCode)",
            "void 	ProvisionalUserMergeCompleted (bool success)",
            "void 	RefreshToken (uint64_t applicationId, std::string const &refreshToken, discordpp::Client::TokenExchangeCallback callback)",
            "void 	SetAuthorizeDeviceScreenClosedCallback (discordpp::Client::AuthorizeDeviceScreenClosedCallback cb)",
            "void 	SetGameWindowPid (int32_t pid)",
            "void 	SetTokenExpirationCallback (discordpp::Client::TokenExpirationCallback callback)",
            "void 	UpdateProvisionalAccountDisplayName (std::string const &name, discordpp::Client::UpdateProvisionalAccountDisplayNameCallback callback)",
            "void 	UpdateToken (discordpp::AuthorizationTokenType tokenType, std::string token, discordpp::Client::UpdateTokenCallback callback)",
            # Chat
            "bool 	CanOpenMessageInDiscord (uint64_t messageId)",
            "void 	DeleteUserMessage (uint64_t recipientId, uint64_t messageId, discordpp::Client::DeleteUserMessageCallback cb)",
            "void 	EditUserMessage (uint64_t recipientId, uint64_t messageId, std::string const &content, discordpp::Client::EditUserMessageCallback cb)",
            "std::optional< discordpp::ChannelHandle > 	GetChannelHandle (uint64_t channelId) const",
            "std::optional< discordpp::MessageHandle > 	GetMessageHandle (uint64_t messageId) const",
            "void 	OpenMessageInDiscord (uint64_t messageId, discordpp::Client::ProvisionalUserMergeRequiredCallback provisionalUserMergeRequiredCallback, discordpp::Client::OpenMessageInDiscordCallback callback)",
            "void 	SendLobbyMessage (uint64_t lobbyId, std::string const &content, discordpp::Client::SendUserMessageCallback cb)",
            "void 	SendLobbyMessageWithMetadata (uint64_t lobbyId, std::string const &content, std::unordered_map< std::string, std::string > const &metadata, discordpp::Client::SendUserMessageCallback cb)",
            "void 	SendUserMessage (uint64_t recipientId, std::string const &content, discordpp::Client::SendUserMessageCallback cb)",
            "void 	SendUserMessageWithMetadata (uint64_t recipientId, std::string const &content, std::unordered_map< std::string, std::string > const &metadata, discordpp::Client::SendUserMessageCallback cb)",
            "void 	SetMessageCreatedCallback (discordpp::Client::MessageCreatedCallback cb)",
            "void 	SetMessageDeletedCallback (discordpp::Client::MessageDeletedCallback cb)",
            "void 	SetMessageUpdatedCallback (discordpp::Client::MessageUpdatedCallback cb)",
            "void 	SetShowingChat (bool showingChat)",
            # Core
            "void 	AddLogCallback (discordpp::Client::LogCallback callback, discordpp::LoggingSeverity minSeverity)",
            "void 	AddVoiceLogCallback (discordpp::Client::LogCallback callback, discordpp::LoggingSeverity minSeverity)",
            "void 	Connect ()",
            "void 	Disconnect ()",
            "discordpp::Client::Status 	GetStatus () const",
            "bool 	SetLogDir (std::string const &path, discordpp::LoggingSeverity minSeverity)",
            "void 	SetStatusChangedCallback (discordpp::Client::OnStatusChanged cb)",
            "void 	SetVoiceLogDir (std::string const &path, discordpp::LoggingSeverity minSeverity)",
            # Lobbies
            "void 	CreateOrJoinLobby (std::string const &secret, discordpp::Client::CreateOrJoinLobbyCallback callback)",
            "void 	CreateOrJoinLobbyWithMetadata (std::string const &secret, std::unordered_map< std::string, std::string > const &lobbyMetadata, std::unordered_map< std::string, std::string > const &memberMetadata, discordpp::Client::CreateOrJoinLobbyCallback callback)",
            "void 	GetGuildChannels (uint64_t guildId, discordpp::Client::GetGuildChannelsCallback cb)",
            "std::optional< discordpp::LobbyHandle > 	GetLobbyHandle (uint64_t lobbyId) const",
            "std::vector< uint64_t > 	GetLobbyIds () const",
            "void 	GetUserGuilds (discordpp::Client::GetUserGuildsCallback cb)",
            "void 	LeaveLobby (uint64_t lobbyId, discordpp::Client::LeaveLobbyCallback callback)",
            "void 	LinkChannelToLobby (uint64_t lobbyId, uint64_t channelId, discordpp::Client::LinkOrUnlinkChannelCallback callback)",
            "void 	SetLobbyCreatedCallback (discordpp::Client::LobbyCreatedCallback cb)",
            "void 	SetLobbyDeletedCallback (discordpp::Client::LobbyDeletedCallback cb)",
            "void 	SetLobbyMemberAddedCallback (discordpp::Client::LobbyMemberAddedCallback cb)",
            "void 	SetLobbyMemberRemovedCallback (discordpp::Client::LobbyMemberRemovedCallback cb)",
            "void 	SetLobbyMemberUpdatedCallback (discordpp::Client::LobbyMemberUpdatedCallback cb)",
            "void 	SetLobbyUpdatedCallback (discordpp::Client::LobbyUpdatedCallback cb)",
            "void 	UnlinkChannelFromLobby (uint64_t lobbyId, discordpp::Client::LinkOrUnlinkChannelCallback callback)",
            # Presence
            "void 	AcceptActivityInvite (discordpp::ActivityInvite invite, discordpp::Client::AcceptActivityInviteCallback cb)",
            "void 	ClearRichPresence ()",
            "bool 	RegisterLaunchCommand (uint64_t applicationId, std::string command)",
            "bool 	RegisterLaunchSteamApplication (uint64_t applicationId, uint32_t steamAppId)",
            "void 	SendActivityInvite (uint64_t userId, std::string const &content, discordpp::Client::SendActivityInviteCallback cb)",
            "void 	SendActivityJoinRequest (uint64_t userId, discordpp::Client::SendActivityInviteCallback cb)",
            "void 	SendActivityJoinRequestReply (discordpp::ActivityInvite invite, discordpp::Client::SendActivityInviteCallback cb)",
            "void 	SetActivityInviteCreatedCallback (discordpp::Client::ActivityInviteCallback cb)",
            "void 	SetActivityInviteUpdatedCallback (discordpp::Client::ActivityInviteCallback cb)",
            "void 	SetActivityJoinCallback (discordpp::Client::ActivityJoinCallback cb)",
            "void 	SetOnlineStatus (discordpp::StatusType status, discordpp::Client::UpdateStatusCallback callback)",
            "void 	UpdateRichPresence (discordpp::Activity activity, discordpp::Client::UpdateRichPresenceCallback cb)",
            # Relationships
            "void 	AcceptDiscordFriendRequest (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	AcceptGameFriendRequest (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	BlockUser (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	CancelDiscordFriendRequest (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	CancelGameFriendRequest (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "discordpp::RelationshipHandle 	GetRelationshipHandle (uint64_t userId) const",
            "std::vector< discordpp::RelationshipHandle > 	GetRelationships () const",
            "void 	RejectDiscordFriendRequest (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	RejectGameFriendRequest (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	RemoveDiscordAndGameFriend (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	RemoveGameFriend (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "std::vector< discordpp::UserHandle > 	SearchFriendsByUsername (std::string searchStr) const",
            "void 	SendDiscordFriendRequest (std::string const &username, discordpp::Client::SendFriendRequestCallback cb)",
            "void 	SendDiscordFriendRequestById (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	SendGameFriendRequest (std::string const &username, discordpp::Client::SendFriendRequestCallback cb)",
            "void 	SendGameFriendRequestById (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            "void 	SetRelationshipCreatedCallback (discordpp::Client::RelationshipCreatedCallback cb)",
            "void 	SetRelationshipDeletedCallback (discordpp::Client::RelationshipDeletedCallback cb)",
            "void 	UnblockUser (uint64_t userId, discordpp::Client::UpdateRelationshipCallback cb)",
            # Users
            "discordpp::UserHandle 	GetCurrentUser () const",
            "void 	GetDiscordClientConnectedUser (uint64_t applicationId, discordpp::Client::GetDiscordClientConnectedUserCallback callback) const",
            "std::optional< discordpp::UserHandle > 	GetUser (uint64_t userId) const",
            "void 	SetUserUpdatedCallback (discordpp::Client::UserUpdatedCallback cb)",
        ],
        "ClientResult": [
            "std::string 	ToString () const",
            "discordpp::ErrorType 	Type () const",
            "void 	SetType (discordpp::ErrorType Type)",
            "std::string 	Error () const",
            "void 	SetError (std::string Error)",
            "int32_t 	ErrorCode () const",
            "void 	SetErrorCode (int32_t ErrorCode)",
            "discordpp::HttpStatusCode 	Status () const",
            "void 	SetStatus (discordpp::HttpStatusCode Status)",
            "std::string 	ResponseBody () const",
            "void 	SetResponseBody (std::string ResponseBody)",
            "bool 	Successful () const",
            "void 	SetSuccessful (bool Successful)",
            "bool 	Retryable () const",
            "void 	SetRetryable (bool Retryable)",
            "float 	RetryAfter () const",
            "void 	SetRetryAfter (float RetryAfter)",
        ],
        "DeviceAuthorizationArgs": [
            "uint64_t 	ClientId () const",
            "void 	SetClientId (uint64_t ClientId)",
            "std::string 	Scopes () const",
            "void 	SetScopes (std::string Scopes)",
        ],
        "GuildChannel": [
            "uint64_t 	Id () const",
            "void 	SetId (uint64_t Id)",
            "std::string 	Name () const",
            "void 	SetName (std::string Name)",
            "bool 	IsLinkable () const",
            "void 	SetIsLinkable (bool IsLinkable)",
            "bool 	IsViewableAndWriteableByAllMembers () const",
            "void 	SetIsViewableAndWriteableByAllMembers (bool IsViewableAndWriteableByAllMembers)",
            "std::optional< discordpp::LinkedLobby > 	LinkedLobby () const",
            "void 	SetLinkedLobby (std::optional< discordpp::LinkedLobby > LinkedLobby)",
        ],
        "GuildMinimal": [
            "uint64_t 	Id () const",
            "void 	SetId (uint64_t Id)",
            "std::string 	Name () const",
            "void 	SetName (std::string Name)",
        ],
        "LinkedChannel": [
            "uint64_t 	Id () const",
            "void 	SetId (uint64_t Id)",
            "std::string 	Name () const",
            "void 	SetName (std::string Name)",
            "uint64_t 	GuildId () const",
            "void 	SetGuildId (uint64_t GuildId)",
        ],
        "LinkedLobby": [
            "uint64_t 	ApplicationId () const",
            "void 	SetApplicationId (uint64_t ApplicationId)",
            "uint64_t 	LobbyId () const",
            "void 	SetLobbyId (uint64_t LobbyId)",
        ],
        "LobbyHandle": [
            "std::optional< discordpp::CallInfoHandle > 	GetCallInfoHandle () const",
            "std::optional< discordpp::LobbyMemberHandle > 	GetLobbyMemberHandle (uint64_t memberId) const",
            "uint64_t 	Id () const",
            "std::optional< discordpp::LinkedChannel > 	LinkedChannel () const",
            "std::vector< uint64_t > 	LobbyMemberIds () const",
            "std::vector< discordpp::LobbyMemberHandle > 	LobbyMembers () const",
            "std::unordered_map< std::string, std::string > 	Metadata () const",
        ],
        "LobbyMemberHandle": [
            "bool 	CanLinkLobby () const",
            "bool 	Connected () const",
            "uint64_t 	Id () const",
            "std::unordered_map< std::string, std::string > 	Metadata () const",
            "std::optional< discordpp::UserHandle > 	User () const",
        ],
        "MessageHandle": [
            "std::optional< discordpp::AdditionalContent > 	AdditionalContent () const",
            "std::optional< discordpp::UserHandle > 	Author () const",
            "uint64_t 	AuthorId () const",
            "std::optional< discordpp::ChannelHandle > 	Channel () const",
            "uint64_t 	ChannelId () const",
            "std::string 	Content () const",
            "std::optional< discordpp::DisclosureTypes > 	DisclosureType () const",
            "uint64_t 	EditedTimestamp () const",
            "uint64_t 	Id () const",
            "std::optional< discordpp::LobbyHandle > 	Lobby () const",
            "std::unordered_map< std::string, std::string > 	Metadata () const",
            "std::string 	RawContent () const",
            "std::optional< discordpp::UserHandle > 	Recipient () const",
            "uint64_t 	RecipientId () const",
            "bool 	SentFromGame () const",
            "uint64_t 	SentTimestamp () const",
        ],
        "RelationshipHandle": [
            "discordpp::RelationshipType 	DiscordRelationshipType () const",
            "discordpp::RelationshipType 	GameRelationshipType () const",
            "uint64_t 	Id () const",
            "std::optional< discordpp::UserHandle > 	User () const",
        ],
        "UserHandle": [
            "std::optional< std::string > 	Avatar () const",
            "std::string 	AvatarUrl (discordpp::UserHandle::AvatarType animatedType, discordpp::UserHandle::AvatarType staticType) const",
            "std::string 	DisplayName () const",
            "std::optional< discordpp::Activity > 	GameActivity () const",
            "std::optional< std::string > 	GlobalName () const",
            "uint64_t 	Id () const",
            "bool 	IsProvisional () const",
            "discordpp::RelationshipHandle 	Relationship () const",
            "discordpp::StatusType 	Status () const",
            "std::string 	Username () const",
        ],
        "VADThresholdSettings": [
            "float 	VadThreshold () const",
            "void 	SetVadThreshold (float VadThreshold)",
            "bool 	Automatic () const",
            "void 	SetAutomatic (bool Automatic)",
        ],
        "VoiceStateHandle": [
            "bool 	SelfDeaf () const",
            "bool 	SelfMute () const",
        ],
    }

    return CLASSES


def get_callbacks() -> dict:
    global CALLBACKS_ARGS

    if CALLBACKS_ARGS != {}:
        return CALLBACKS_ARGS

    CALLBACKS_ARGS = {
        "Call": {
            "OnVoiceStateChanged": "uint64_t userId",
            "OnParticipantChanged": "uint64_t userId, bool added",
            "OnSpeakingStatusChanged": "uint64_t userId, bool isPlayingSound",
            "OnStatusChanged": "discordpp::Call::Status status, discordpp::Call::Error error, int32_t errorDetail",
        },
        "Client": {
            "EndCallCallback": "",
            "EndCallsCallback": "",
            "GetCurrentInputDeviceCallback": "discordpp::AudioDevice device",
            "GetCurrentOutputDeviceCallback": "discordpp::AudioDevice device",
            "GetInputDevicesCallback": "std::vector<discordpp::AudioDevice> devices",
            "GetOutputDevicesCallback": "std::vector<discordpp::AudioDevice> devices",
            "DeviceChangeCallback": "std::vector<discordpp::AudioDevice> inputDevices, std::vector<discordpp::AudioDevice> outputDevices",
            "SetInputDeviceCallback": "discordpp::ClientResult result",
            "NoAudioInputCallback": "bool inputDetected",
            "SetOutputDeviceCallback": "discordpp::ClientResult result",
            "VoiceParticipantChangedCallback": "uint64_t lobbyId, uint64_t memberId, bool added",
            "UserAudioReceivedCallback": "uint64_t userId, int16_t const* data, uint64_t samplesPerChannel, int32_t sampleRate, uint64_t channels, bool& outShouldMute",
            "UserAudioCapturedCallback": "int16_t const* data, uint64_t samplesPerChannel, int32_t sampleRate, uint64_t channels",
            "AuthorizationCallback": "discordpp::ClientResult result, std::string code, std::string redirectUri",
            "FetchCurrentUserCallback": "discordpp::ClientResult result, uint64_t id, std::string name",
            "TokenExchangeCallback": "discordpp::ClientResult result, std::string accessToken, std::string refreshToken, discordpp::AuthorizationTokenType tokenType, int32_t expiresIn, std::string scopes",
            "AuthorizeDeviceScreenClosedCallback": "",
            "TokenExpirationCallback": "",
            "UpdateProvisionalAccountDisplayNameCallback": "discordpp::ClientResult result",
            "UpdateTokenCallback": "discordpp::ClientResult result",
            "DeleteUserMessageCallback": "discordpp::ClientResult result",
            "EditUserMessageCallback": "discordpp::ClientResult result",
            "ProvisionalUserMergeRequiredCallback": "",
            "OpenMessageInDiscordCallback": "discordpp::ClientResult result",
            "SendUserMessageCallback": "discordpp::ClientResult result, uint64_t messageId",
            "MessageCreatedCallback": "uint64_t messageId",
            "MessageDeletedCallback": "uint64_t messageId, uint64_t channelId",
            "MessageUpdatedCallback": "uint64_t messageId",
            "LogCallback": "std::string message, discordpp::LoggingSeverity severity",
            "OnStatusChanged": "discordpp::Client::Status status, discordpp::Client::Error error, int32_t errorDetail",
            "CreateOrJoinLobbyCallback": "discordpp::ClientResult result, uint64_t lobbyId",
            "GetGuildChannelsCallback": "discordpp::ClientResult result, std::vector<discordpp::GuildChannel> guildChannels",
            "GetUserGuildsCallback": "discordpp::ClientResult result, std::vector<discordpp::GuildMinimal> guilds",
            "LeaveLobbyCallback": "discordpp::ClientResult result",
            "LinkOrUnlinkChannelCallback": "discordpp::ClientResult result",
            "LobbyCreatedCallback": "uint64_t lobbyId",
            "LobbyDeletedCallback": "uint64_t lobbyId",
            "LobbyMemberAddedCallback": "uint64_t lobbyId, uint64_t memberId",
            "LobbyMemberRemovedCallback": "uint64_t lobbyId, uint64_t memberId",
            "LobbyMemberUpdatedCallback": "uint64_t lobbyId, uint64_t memberId",
            "LobbyUpdatedCallback": "uint64_t lobbyId",
            "AcceptActivityInviteCallback": "discordpp::ClientResult result, std::string joinSecret",
            "SendActivityInviteCallback": "discordpp::ClientResult result",
            "ActivityInviteCallback": "discordpp::ActivityInvite invite",
            "ActivityJoinCallback": "std::string joinSecret",
            "UpdateStatusCallback": "discordpp::ClientResult result",
            "UpdateRichPresenceCallback": "discordpp::ClientResult result",
            "UpdateRelationshipCallback": "discordpp::ClientResult result",
            "SendFriendRequestCallback": "discordpp::ClientResult result",
            "RelationshipCreatedCallback": "uint64_t userId, bool isDiscordRelationshipUpdate",
            "RelationshipDeletedCallback": "uint64_t userId, bool isDiscordRelationshipUpdate",
            "GetDiscordClientConnectedUserCallback": "discordpp::ClientResult result, std::optional<discordpp::UserHandle> user",
            "UserUpdatedCallback": "uint64_t userI",
        },
    }

    return CALLBACKS_ARGS


def is_callback(text: str) -> bool:
    _, _, text = text.rpartition("::")

    for callbacks in get_callbacks().values():
        if text in callbacks:
            return True

    return False
