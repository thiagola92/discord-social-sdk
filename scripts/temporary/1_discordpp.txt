
# Represents the memory state of a Discord object.
enum DiscordObjectState {
    # The object has been freed
    Invalid: 0,
    # The object is owned by the C++ wrapper and methods can be called on it
    Owned: 1,
}


# \brief ActivityActionTypes represents the type of invite being sent to a user.
# 
# There are essentially two types of invites:
# 1: A user with an existing activity party can invite another user to join that existing party
# 2: A user can request to join the existing activity party of another user
# 
# See https://discord.com/developers/docs/rich-presence/overview for more information.
enum ActivityActionTypes {
    # \brief Join
    Join: 1,
    # \brief JoinRequest
    JoinRequest: 5,
}


# \brief Allows your game to control the privacy of the party the user is in.
enum ActivityPartyPrivacy {
    # \brief The party is private (or unknown), which means that the user is in a party but it is
    # not
    # joinable without sending a request to join the party.
    # 
    # This is the default value. You will also receive this value when receiving other users'
    # activities as the party privacy for other users is not exposed.
    Private: 0,
    # \brief The party is public, which means that the user is in a party which *could* be
    # joinable by
    # either friends or mutual voice participants without sending a request to join the party.
    # This depends on a user's desired Discord account privacy settings.
    Public: 1,
}


# \brief Discord RichPresence supports multiple types of activities that a user can be doing.
# 
# For the SDK, the only activity type that is really relevant is `Playing`.
# The others are provided for completeness.
# 
# See https://discord.com/developers/docs/rich-presence/overview for more information.
enum ActivityTypes {
    # \brief Playing
    Playing: 0,
    # \brief Streaming
    Streaming: 1,
    # \brief Listening
    Listening: 2,
    # \brief Watching
    Watching: 3,
    # \brief CustomStatus
    CustomStatus: 4,
    # \brief Competing
    Competing: 5,
    # \brief HangStatus
    HangStatus: 6,
}


# \brief Controls which Discord RichPresence field is displayed in the user's status.
# 
# See https://discord.com/developers/docs/rich-presence/overview for more information.
enum StatusDisplayTypes {
    # \brief Name
    Name: 0,
    # \brief State
    State: 1,
    # \brief Details
    Details: 2,
}


# \brief Represents the type of platforms that an activity invite can be accepted on.
enum ActivityGamePlatforms {
    # \brief Desktop
    Desktop: 1,
    # \brief Xbox
    Xbox: 2,
    # \brief Samsung
    Samsung: 4,
    # \brief IOS
    IOS: 8,
    # \brief Android
    Android: 16,
    # \brief Embedded
    Embedded: 32,
    # \brief PS4
    PS4: 64,
    # \brief PS5
    PS5: 128,
}


# \brief Enum representing various types of errors the SDK returns.
enum ErrorType {
    # \brief No error, the operation was successful.
    None: 0,
    # \brief The user is offline or there was some network issue that prevented an underlying
    # HTTP call from succeeding.
    NetworkError: 1,
    # \brief An HTTP call was made to Discord's servers but a non success HTTP status code was
    # returned.
    # In some cases this may be retryable, and if so ClientResult::Retryable will be true.
    # In most cases though the failure is due to a validation or permissions error, and the
    # request is not retryable. ClientResult::Error and ClientResult::ErrorCode will have more
    # information.
    HTTPError: 2,
    # \brief An operation such as sending a friend request or joining a lobby was attempted but
    # the
    # Client is not yet ready. Wait for Client::Status to change to Client::Status::Ready before
    # trying again.
    # 
    # Also be sure to call Client::Connect to begin the process of connecting to Discord's
    # servers, otherwise
    # the Client will never become ready.
    ClientNotReady: 3,
    # \brief An operation was temporarily disabled for stability reasons.
    Disabled: 4,
    # \brief The Client has been destroyed and so this operation cannot complete.
    ClientDestroyed: 5,
    # \brief Used when an SDK method is called but the inputs don't pass local validation. For
    # example
    # if one attempts to accept a friend request when there is no pending friend request for that
    # user,
    # this ErrorType would be used.
    # 
    # The specific validation error will be included in the `error` field, and no other
    # ClientResult fields will be set.
    ValidationError: 6,
    # \brief The user or developer aborted an operation, such as an authorization flow.
    Aborted: 7,
    # \brief An authorization function failed, but not necessarily as the result of an HTTP call
    # that
    # returned an error.
    AuthorizationFailed: 8,
    # \brief An RPC call was made to Discord's desktop application, but it returned a non-success
    # result.
    # The error and errorCode fields should both be set with more information.
    RPCError: 9,
}


# \brief Enum that represents the various HTTP status codes that can be returned.
# 
# You can read more about these at: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
# For convenience, we have defined a couple of enum values that are non-standard HTTP codes to
# represent certain types of errors.
enum HttpStatusCode {
    # \brief None
    None: 0,
    # \brief Continue
    Continue: 100,
    # \brief SwitchingProtocols
    SwitchingProtocols: 101,
    # \brief Processing
    Processing: 102,
    # \brief EarlyHints
    EarlyHints: 103,
    # \brief Ok
    Ok: 200,
    # \brief Created
    Created: 201,
    # \brief Accepted
    Accepted: 202,
    # \brief NonAuthoritativeInfo
    NonAuthoritativeInfo: 203,
    # \brief NoContent
    NoContent: 204,
    # \brief ResetContent
    ResetContent: 205,
    # \brief PartialContent
    PartialContent: 206,
    # \brief MultiStatus
    MultiStatus: 207,
    # \brief AlreadyReported
    AlreadyReported: 208,
    # \brief ImUsed
    ImUsed: 209,
    # \brief MultipleChoices
    MultipleChoices: 300,
    # \brief MovedPermanently
    MovedPermanently: 301,
    # \brief Found
    Found: 302,
    # \brief SeeOther
    SeeOther: 303,
    # \brief NotModified
    NotModified: 304,
    # \brief TemporaryRedirect
    TemporaryRedirect: 307,
    # \brief PermanentRedirect
    PermanentRedirect: 308,
    # \brief BadRequest
    BadRequest: 400,
    # \brief Unauthorized
    Unauthorized: 401,
    # \brief PaymentRequired
    PaymentRequired: 402,
    # \brief Forbidden
    Forbidden: 403,
    # \brief NotFound
    NotFound: 404,
    # \brief MethodNotAllowed
    MethodNotAllowed: 405,
    # \brief NotAcceptable
    NotAcceptable: 406,
    # \brief ProxyAuthRequired
    ProxyAuthRequired: 407,
    # \brief RequestTimeout
    RequestTimeout: 408,
    # \brief Conflict
    Conflict: 409,
    # \brief Gone
    Gone: 410,
    # \brief LengthRequired
    LengthRequired: 411,
    # \brief PreconditionFailed
    PreconditionFailed: 412,
    # \brief PayloadTooLarge
    PayloadTooLarge: 413,
    # \brief UriTooLong
    UriTooLong: 414,
    # \brief UnsupportedMediaType
    UnsupportedMediaType: 415,
    # \brief RangeNotSatisfiable
    RangeNotSatisfiable: 416,
    # \brief ExpectationFailed
    ExpectationFailed: 417,
    # \brief MisdirectedRequest
    MisdirectedRequest: 421,
    # \brief UnprocessableEntity
    UnprocessableEntity: 422,
    # \brief Locked
    Locked: 423,
    # \brief FailedDependency
    FailedDependency: 424,
    # \brief TooEarly
    TooEarly: 425,
    # \brief UpgradeRequired
    UpgradeRequired: 426,
    # \brief PreconditionRequired
    PreconditionRequired: 428,
    # \brief TooManyRequests
    TooManyRequests: 429,
    # \brief RequestHeaderFieldsTooLarge
    RequestHeaderFieldsTooLarge: 431,
    # \brief InternalServerError
    InternalServerError: 500,
    # \brief NotImplemented
    NotImplemented: 501,
    # \brief BadGateway
    BadGateway: 502,
    # \brief ServiceUnavailable
    ServiceUnavailable: 503,
    # \brief GatewayTimeout
    GatewayTimeout: 504,
    # \brief HttpVersionNotSupported
    HttpVersionNotSupported: 505,
    # \brief VariantAlsoNegotiates
    VariantAlsoNegotiates: 506,
    # \brief InsufficientStorage
    InsufficientStorage: 507,
    # \brief LoopDetected
    LoopDetected: 508,
    # \brief NotExtended
    NotExtended: 510,
    # \brief NetworkAuthorizationRequired
    NetworkAuthorizationRequired: 511,
}


# \brief Represents the crypto method used to generate a code challenge.
# 
# The only method used by the SDK is sha256.
enum AuthenticationCodeChallengeMethod {
    # \brief S256
    S256: 0,
}


# \brief Represents the type of integration the app will be installed as.
enum IntegrationType {
    # \brief GuildInstall
    GuildInstall: 0,
    # \brief UserInstall
    UserInstall: 1,
}


# \brief Represents the type of additional content contained in a message.
enum AdditionalContentType {
    # \brief Other
    Other: 0,
    # \brief Attachment
    Attachment: 1,
    # \brief Poll
    Poll: 2,
    # \brief VoiceMessage
    VoiceMessage: 3,
    # \brief Thread
    Thread: 4,
    # \brief Embed
    Embed: 5,
    # \brief Sticker
    Sticker: 6,
}


# \brief The Discord Voice audio system to use.
enum AudioSystem {
    # \brief Use the standard audio system.
    Standard: 0,
    # \brief Use the game audio system.
    Game: 1,
}


# \brief Represents whether a voice call is using push to talk or auto voice detection
enum AudioModeType {
    # \brief MODE_UNINIT
    MODE_UNINIT: 0,
    # \brief MODE_VAD
    MODE_VAD: 1,
    # \brief MODE_PTT
    MODE_PTT: 2,
}


# \brief Enum that represents the various channel types on Discord.
# 
# For more information see: https://discord.com/developers/docs/resources/channel
enum ChannelType {
    # \brief GuildText
    GuildText: 0,
    # \brief Dm
    Dm: 1,
    # \brief GuildVoice
    GuildVoice: 2,
    # \brief GroupDm
    GroupDm: 3,
    # \brief GuildCategory
    GuildCategory: 4,
    # \brief GuildNews
    GuildNews: 5,
    # \brief GuildStore
    GuildStore: 6,
    # \brief GuildNewsThread
    GuildNewsThread: 10,
    # \brief GuildPublicThread
    GuildPublicThread: 11,
    # \brief GuildPrivateThread
    GuildPrivateThread: 12,
    # \brief GuildStageVoice
    GuildStageVoice: 13,
    # \brief GuildDirectory
    GuildDirectory: 14,
    # \brief GuildForum
    GuildForum: 15,
    # \brief GuildMedia
    GuildMedia: 16,
    # \brief Lobby
    Lobby: 17,
    # \brief EphemeralDm
    EphemeralDm: 18,
}


# \brief Enum that represents the possible types of relationships that can exist between two users
enum RelationshipType {
    # \brief The user has no relationship with the other user.
    None: 0,
    # \brief The user is friends with the other user.
    Friend: 1,
    # \brief The current user has blocked the target user, and so certain actions such as sending
    # messages between these users will not work.
    Blocked: 2,
    # \brief The current user has received a friend request from the target user, but it is not
    # yet
    # accepted.
    PendingIncoming: 3,
    # \brief The current user has sent a friend request to the target user, but it is not yet
    # accepted.
    PendingOutgoing: 4,
    # \brief The Implicit type is documented for visibility, but should be unused in the SDK.
    Implicit: 5,
    # \brief The Suggestion type is documented for visibility, but should be unused in the SDK.
    Suggestion: 6,
}


# \brief Enum that specifies the various online statuses for a user.
# 
# Generally a user is online or offline, but in Discord users are able to further customize their
# status such as turning on "Do not Disturb" mode or "Dnd" to silence notifications.
enum StatusType {
    # \brief The user is online and recently active.
    Online: 0,
    # \brief The user is offline and not connected to Discord.
    Offline: 1,
    # \brief Blocked
    Blocked: 2,
    # \brief The user is online, but has not been active for a while and may be away from their
    # computer.
    Idle: 3,
    # \brief The user is online, but wishes to suppress notifications for the time being.
    Dnd: 4,
    # \brief The user is online, but wishes to appear as if they are offline to other users.
    Invisible: 5,
    # \brief The user is online and is actively streaming content.
    Streaming: 6,
    # \brief Unknown
    Unknown: 7,
}


# \brief Enum that represents various informational disclosures that Discord may make to users, so
# that the game can identity them and customize their rendering as desired.
# 
# See MessageHandle for more details.
enum DisclosureTypes {
    # \brief This disclosure type happens the first time a user sends a message in game, and that
    # message
    # will be able to be viewed on Discord, so the user knows their content is being copied out of
    # the game.
    MessageDataVisibleOnDiscord: 3,
}


# \brief Represents the type of auth token used by the SDK, either the normal tokens produced by
# the Discord desktop app, or an oauth2 bearer token. Only the latter can be used by the SDK.
enum AuthorizationTokenType {
    # \brief User
    User: 0,
    # \brief Bearer
    Bearer: 1,
}


# \brief Represents the various identity providers that can be used to authenticate a provisional
# account user for public clients.
enum AuthenticationExternalAuthType {
    # \brief OIDC
    OIDC: 0,
    # \brief EpicOnlineServicesAccessToken
    EpicOnlineServicesAccessToken: 1,
    # \brief EpicOnlineServicesIdToken
    EpicOnlineServicesIdToken: 2,
    # \brief SteamSessionTicket
    SteamSessionTicket: 3,
    # \brief UnityServicesIdToken
    UnityServicesIdToken: 4,
}


# \brief Enum that represents the various log levels supported by the SDK.
enum LoggingSeverity {
    # \brief Verbose
    Verbose: 1,
    # \brief Info
    Info: 2,
    # \brief Warning
    Warning: 3,
    # \brief Error
    Error: 4,
    # \brief None
    None: 5,
}


# \brief Enum that represents the logical groups of relationships based on online status and game
# activity
enum RelationshipGroupType {
    # \brief Users who are online and currently playing the game
    OnlinePlayingGame: 0,
    # \brief Users who are online but not playing the game
    OnlineElsewhere: 1,
    # \brief Users who are offline
    Offline: 2,
}


# \brief Enum that represents any network errors with the Call.
enum Error {
    # \brief None
    None: 0,
    # \brief SignalingConnectionFailed
    SignalingConnectionFailed: 1,
    # \brief SignalingUnexpectedClose
    SignalingUnexpectedClose: 2,
    # \brief VoiceConnectionFailed
    VoiceConnectionFailed: 3,
    # \brief JoinTimeout
    JoinTimeout: 4,
    # \brief Forbidden
    Forbidden: 5,
}


# \brief Enum that respresents the state of the Call's network connection.
enum Status {
    # \brief Disconnected
    Disconnected: 0,
    # \brief Joining
    Joining: 1,
    # \brief Connecting
    Connecting: 2,
    # \brief SignalingConnected
    SignalingConnected: 3,
    # \brief Connected
    Connected: 4,
    # \brief Reconnecting
    Reconnecting: 5,
    # \brief Disconnecting
    Disconnecting: 6,
}


# \brief The desired type of avatar url to generate for a User.
enum AvatarType {
    # \brief Gif
    Gif: 0,
    # \brief Webp
    Webp: 1,
    # \brief Png
    Png: 2,
    # \brief Jpeg
    Jpeg: 3,
}


# \brief Represents an error state for the socket connection that the Discord SDK maintains
# with the Discord backend.
# 
# Generic network failures will use the ConnectionFailed and ConnectionCanceled
# enum values. Other errors such as if the user's auth token is invalid or out of
# date will be UnexpectedClose and you should look at the other Error fields for the specific
# details.
enum Error {
    # \brief None
    None: 0,
    # \brief ConnectionFailed
    ConnectionFailed: 1,
    # \brief UnexpectedClose
    UnexpectedClose: 2,
    # \brief ConnectionCanceled
    ConnectionCanceled: 3,
}


# \brief This enum refers to the status of the internal websocket the SDK uses to communicate
# with Discord There are ~2 phases for "launching" the client:
# 1. The socket has to connect to Discord and exchange an auth token. This is indicated by the
# `Connecting` and `Connected` values.
# 2. The socket has to receive an initial payload of data that describes the current user,
# what lobbies they are in, who their friends are, etc. This is the `Ready` status.
# Many Client functions will not work until the status changes to `Ready`, such as
# GetCurrentUser().
# 
# Status::Ready is the one you want to wait for!
# 
# Additionally, sometimes the socket will be disconnected, such as through temporary network
# blips. But it will try to automatically reconnect, as indicated by the `Reconnecting`
# status.
enum Status {
    # \brief Disconnected
    Disconnected: 0,
    # \brief Connecting
    Connecting: 1,
    # \brief Connected
    Connected: 2,
    # \brief Ready
    Ready: 3,
    # \brief Reconnecting
    Reconnecting: 4,
    # \brief Disconnecting
    Disconnecting: 5,
    # \brief HttpWait
    HttpWait: 6,
}


# \brief Represents the type of thread to control thread priority on.
enum Thread {
    # \brief Client
    Client: 0,
    # \brief Voice
    Voice: 1,
    # \brief Network
    Network: 2,
}
