<?xml version="1.0" encoding="UTF-8" ?>
<class xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="DiscordppLobbyHandle" inherits="RefCounted" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
        \brief A LobbyHandle represents a single lobby in the SDK. A lobby can be thought of as just an arbitrary, developer-controlled group of users that can communicate with each other. 
        [b]## Managing Lobbies[/b] 
        Lobbies can be managed through a set of @ref server_apis that are documented elsewhere, which allow you to create lobbies, add and remove users from lobbies, and delete them. There is also an API to create lobbies without any server side component using the Client::CreateOrJoinLobby function, which accepts a game-generated secret and will join the user to the lobby associated with that secret, creating it if necessary. NOTE: When using this API the secret will auto-expire in 30 days, at which point the existing lobby can no longer be joined, but will still exist. We recommend using this for short term lobbies and not permanent lobbies. Use the Server API for more permanent lobbies. Members of a lobby are not automatically removed when they close the game or temporarily disconnect. When the SDK connects, it will attempt to re-connect to any lobbies it is currently a member of. 
        [b]# Lobby Auto-Deletion[/b] 
        Lobbies are generally ephemeral and will be auto-deleted if they have been idle (meaning no users are actively connected to them) for some amount of time. The default is to auto delete after 5 minutes, but this can be customized when creating the lobby. As long as one user is connected to the lobby though it will not be auto-deleted (meaning they have the SDK running and status is set to Ready). Additionally, lobbies that are linked to a channel on Discord will not be auto deleted. You can also use the @ref server_apis to customize this timeout, it can be raised to as high as 7 days, meaning the lobby only gets deleted if no one connects to it for an entire week. This should give a good amount of permanence to lobbies when needed, but there may be rare cases where a lobby does need to be "rebuilt" if everyone is offline for an extended period. 
        [b]# Membership Limits[/b] 
        Lobbies may have a maximum of 1,000 members, and each user may be in a maximum of 200 lobbies per game. 
        [b]## Audio[/b] 
        Lobbies support voice calls. Although a lobby is allowed to have 1,000 members, you should not try to start voice calls in lobbies that large. We strongly recommend sticking to around 25 members or fewer for voice calls. See Client::StartCall for more information on how to start a voice call in a lobby. 
        [b]## Channel Linking[/b] 
        Lobbies can be linked to a channel on Discord, which allows messages sent in one place to show up in the other. Any lobby can be linked to a channel, but only lobby members with the LobbyMemberFlags::CanLinkLobby flag are allowed to a link a lobby. This flag must be set using the server APIs, which allows you to ensure that only clan/guild/group leaders can link lobbies to Discord channels. To setup a link you'll need to use methods in the Client class to fetch the servers (aka guilds) and channels a user is a member of and setup the link. The Client::GetUserGuilds and Client::GetGuildChannels methods are used to fetch the servers and channels respectively. You can use these to show a UI for the user to pick which server and channel they want to link to. Not all channels are linkable. To be linked: [br]- The channel must be a guild text channel [br]- The channel may not be marked as NSFW [br]- The channel must not be currently linked to a different lobby [br]- The user must have the following permissions in the channel in order to link it:   - Manage Channels   - View Channel   - Send Messages 
        [b]### Linking Private Channels[/b] 
        Discord is allowing all channels the user has access to in a server to be linked in game, even if that channel is private to other members of the server. This means that a user could choose to link a private "admins chat" channel (assuming they are an admin) in game if they wanted. It's not really possible for the game to know which users should have access to that channel or not though. So in this implementation, every member of a lobby will be able to view all messages sent in the linked channel and reply to them. If you are going to allow private channels to be linked in game, you must make sure that users are aware that their private channel will be viewable by everyone in the lobby! To help you identify which channels are public or private, we have added a isViewableAndWriteableByAllMembers boolean which is described more in GuildChannel. You can use that to just not allow private channels to be linked, or to know when to show a clear warning, it's up to you! 
        [b]## Misc[/b] 
        Handle objects in the SDK hold a reference both to the underlying data, and to the SDK instance. Changes to the underlying data will generally be available on existing handles objects without having to re-create them. If the SDK instance is destroyed, but you still have a reference to a handle object, note that it will return the default value for all method calls (ie an empty string for methods that return a string).
        
        Reference: [url]https://discord.com/developers/docs/social-sdk/classdiscordpp_1_1LobbyHandle.html[/url]
    </description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="Drop">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="GetCallInfoHandle">
			<return type="Variant" />
			<description>
				Returns [DiscordppCallInfoHandle] or [code]null[/code].
			</description>
		</method>
		<method name="GetLobbyMemberHandle">
			<return type="Variant" />
			<param index="0" name="memberId" type="int" />
			<description>
				Returns [DiscordppLobbyMemberHandle] or [code]null[/code].
			</description>
		</method>
		<method name="Id">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="LinkedChannel">
			<return type="Variant" />
			<description>
				Returns [DiscordppLinkedChannel] or [code]null[/code].
			</description>
		</method>
		<method name="LobbyMemberIds">
			<return type="int[]" />
			<description>
			</description>
		</method>
		<method name="LobbyMembers">
			<return type="DiscordppLobbyMemberHandle[]" />
			<description>
			</description>
		</method>
		<method name="Metadata">
			<return type="Dictionary[String, String]" />
			<description>
			</description>
		</method>
	</methods>
</class>
