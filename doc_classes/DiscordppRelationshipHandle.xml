<?xml version="1.0" encoding="UTF-8" ?>
<class xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="DiscordppRelationshipHandle" inherits="RefCounted" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
 A RelationshipHandle represents the relationship between the current user and a target user on Discord. Relationships include friends, blocked users, and friend invites.
 The SDK supports two types of relationships: [br]- Discord: These are relationships that persist across games and on the Discord client. Both users will be able to see whether each other is online regardless of whether they are in the same game or not. [br]- Game: These are per-game relationships and do not carry over to other games. The two users will only be able to see if the other is online if they are playing a game in which they are friends.
 If someone is a game friend they can later choose to "upgrade" to a full Discord friend. In this case, the user has two relationships at the same time, which is why there are two different type fields on RelationshipHandle. In this example, their RelationshipHandle::DiscordRelationshipType would be set to RelationshipType::PendingIncoming or RelationshipType::PendingOutgoing (based on whether they are receiving or sending the invite respectively), and their RelationshipHandle::GameRelationshipType would remain as RelationshipType::Friend.
 When a user blocks another user, it is always stored on the RelationshipHandle::DiscordRelationshipType field, and will persist across games. It is not possible to block a user in only one game.
 See the [url=https://discord.com/developers/docs/social-sdk/friends.html]this[/url] documentation for more information.
 Note: While the SDK allows you to manage a user's relationships, you should never take an action without their explicit consent. You should not automatically send or accept friend requests. Only invoke APIs to manage relationships in response to a user action such as clicking a "Send Friend Request" button.
 Handle objects in the SDK hold a reference both to the underlying data, and to the SDK instance. Changes to the underlying data will generally be available on existing handles objects without having to re-create them. If the SDK instance is destroyed, but you still have a reference to a handle object, note that it will return the default value for all method calls (ie an empty string for methods that return a string).

Reference: [url]https://discord.com/developers/docs/social-sdk/classdiscordpp_1_1RelationshipHandle.html[/url]
</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="DiscordRelationshipType">
			<return type="int" enum="DiscordppRelationshipType.Enum" />
			<description>
 Returns the type of the Discord relationship.
</description>
		</method>
		<method name="Drop">
			<return type="void" />
			<description>

</description>
		</method>
		<method name="GameRelationshipType">
			<return type="int" enum="DiscordppRelationshipType.Enum" />
			<description>
 Returns the type of the Game relationship.
</description>
		</method>
		<method name="Id">
			<return type="int" />
			<description>
 Returns the ID of the target user in this relationship.
</description>
		</method>
		<method name="IsSpamRequest">
			<return type="bool" />
			<description>
 Returns whether this relationship is a spam request.
</description>
		</method>
		<method name="User">
			<return type="Variant" />
			<description>
 Returns a handle to the target user in this relationship, if one is available. This would be the user with the same ID as the one returned by the Id() method.
Returns [DiscordppUserHandle] or [code]null[/code].
</description>
		</method>
	</methods>
</class>
