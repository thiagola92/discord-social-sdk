<?xml version="1.0" encoding="UTF-8" ?>
<class xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="DiscordppMessageHandle" inherits="RefCounted" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
 A MessageHandle represents a single message received by the SDK.

 [b]# Chat types[/b]
 The SDK supports two types of chat: [br]1. 1 on 1 chat between two users [br]2. Chat within a lobby
 You can determine the context a message was sent in with the MessageHandle::Channel and ChannelHandle::Type methods. The SDK should only be receiving messages in the following channel types: [br]- DM [br]- Ephemeral DM [br]- Lobby

 [b]# Syncing with Discord[/b]
 In some situations messages sent from the SDK will also show up in Discord. In general this will happen for: [br]- 1 on 1 chat when at least one of the users is a full Discord user [br]- Lobby chat when the lobby is linked to a Discord channel
 Additionally the message must have been sent by a user who is not banned on the Discord side.

 [b]# Legal disclosures[/b]
 As a convenience for game developers, the first time a user sends a message in game, and that message will show up on the Discord client, the SDK will inject a "fake" message into the chat, that contains a basic English explanation of what is happening to the user. You can identify these messages with the MessageHandle::DisclosureType method. We encourage you to customize the rendering of these messages, possibly changing the wording, translating them, and making them look more "official". You can choose to avoid rendering these as well.

 [b]# History[/b]
 The SDK keeps the 25 most recent messages in each channel in memory, but it does not have access to any historical messages sent before the SDK was connected. A MessageHandle will keep working though even after the SDK has discarded the message for being too old, you just won't be able to create a new MessageHandle objects for that message.

 [b]# Unrenderable Content[/b]
 Messages sent on Discord can contain content that may not be renderable in game, such as images, videos, embeds, polls, and more. The game isn't expected to render these, but instead show a small notice so the user is aware there is more content and a way to view that content on Discord. The MessageHandle::AdditionalContent method will contain data about the non-text content in this message.
 There is also more information about the struct of messages on Discord here: https://discord.com/developers/docs/resources/message
 Note: While the SDK allows you to send messages on behalf of a user, you must only do so in response to a user action. You should never automatically send messages.
 Handle objects in the SDK hold a reference both to the underlying data, and to the SDK instance. Changes to the underlying data will generally be available on existing handles objects without having to re-create them. If the SDK instance is destroyed, but you still have a reference to a handle object, note that it will return the default value for all method calls (ie an empty string for methods that return a string).

Reference: [url]https://discord.com/developers/docs/social-sdk/classdiscordpp_1_1MessageHandle.html[/url]
</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="AdditionalContent">
			<return type="Variant" />
			<description>
 If the message contains non-text content, such as images, videos, embeds, polls, etc, this method will return information about that content.
Returns [DiscordppAdditionalContent] or [code]null[/code].
</description>
		</method>
		<method name="ApplicationId">
			<return type="Variant" />
			<description>
 Returns the application ID associated with this message, if any. You can use this to identify if the mesage was sent from another child application in your catalog.
 Note: Parent / child applications are in limited access and the SentFromGame field should be relied on for the common case.
Returns [int] or [code]null[/code].
</description>
		</method>
		<method name="Author">
			<return type="Variant" />
			<description>
 Returns the UserHandle for the author of this message.
Returns [DiscordppUserHandle] or [code]null[/code].
</description>
		</method>
		<method name="AuthorId">
			<return type="int" />
			<description>
 Returns the user ID of the user who sent this message.
</description>
		</method>
		<method name="Channel">
			<return type="Variant" />
			<description>
 Returns the ChannelHandle for the channel this message was sent in.
Returns [DiscordppChannelHandle] or [code]null[/code].
</description>
		</method>
		<method name="ChannelId">
			<return type="int" />
			<description>
 Returns the channel ID this message was sent in.
</description>
		</method>
		<method name="Content">
			<return type="String" />
			<description>
 Returns the content of this message, if any.
 A message can be blank if it was sent from Discord but only contains content such as image attachments. Certain types of markup, such as markup for emojis and mentions, will be auto replaced with a more human readable form, such as `@username` or `:emoji_name:`.
</description>
		</method>
		<method name="DisclosureType">
			<return type="Variant" />
			<description>
 If this is an auto-generated message that is explaining some integration behavior to users, this method will return the type of disclosure so you can customize it.
Returns [enum DiscordppDisclosureTypes.Enum] or [code]null[/code].
</description>
		</method>
		<method name="Drop">
			<return type="void" />
			<description>

</description>
		</method>
		<method name="EditedTimestamp">
			<return type="int" />
			<description>
 The timestamp in millis since the epoch when the message was most recently edited.
 Returns 0 if the message has not been edited yet.
</description>
		</method>
		<method name="Id">
			<return type="int" />
			<description>
 Returns the ID of this message.
</description>
		</method>
		<method name="Lobby">
			<return type="Variant" />
			<description>
 Returns the LobbyHandle this message was sent in, if it was sent in a lobby.
Returns [DiscordppLobbyHandle] or [code]null[/code].
</description>
		</method>
		<method name="Metadata">
			<return type="Dictionary[String, String]" />
			<description>
 Returns any metadata the developer included with this message.
 Metadata is just a set of simple string key/value pairs. An example use case might be to include a character name so you can customize how a message renders in game.
</description>
		</method>
		<method name="RawContent">
			<return type="String" />
			<description>
 Returns the content of this message, if any, but without replacing any markup from emojis and mentions.
 A message can be blank if it was sent from Discord but only contains content such as image attachments.
</description>
		</method>
		<method name="Recipient">
			<return type="Variant" />
			<description>
 Returns the UserHandle for the other participant in a DM, if this message was sent in a DM.
Returns [DiscordppUserHandle] or [code]null[/code].
</description>
		</method>
		<method name="RecipientId">
			<return type="int" />
			<description>
 When this message was sent in a DM or Ephemeral DM, this method will return the ID of the other user in that DM.
</description>
		</method>
		<method name="SentFromGame">
			<return type="bool" />
			<description>
 Returns true if this message was sent in-game, otherwise false (i.e. from Discord itself). If you are using parent / child applications, this will be true if the message was sent from any child application.
</description>
		</method>
		<method name="SentTimestamp">
			<return type="int" />
			<description>
 The timestamp in millis since the epoch when the message was sent.
</description>
		</method>
	</methods>
</class>
