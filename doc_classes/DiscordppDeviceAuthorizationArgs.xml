<?xml version="1.0" encoding="UTF-8" ?>
<class xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="DiscordppDeviceAuthorizationArgs" inherits="RefCounted" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
 Arguments to the Client::GetTokenFromDevice function.

Reference: [url]https://discord.com/developers/docs/social-sdk/classdiscordpp_1_1DeviceAuthorizationArgs.html[/url]
</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="ClientId">
			<return type="int" />
			<description>
 Optional. The Discord application ID for your game. Defaults to the value set by Client::SetApplicationId.
</description>
		</method>
		<method name="Drop">
			<return type="void" />
			<description>

</description>
		</method>
		<method name="Scopes">
			<return type="String" />
			<description>
 Scopes is a space separated string of the oauth scopes your game is requesting.
 Most games should just pass in Client::GetDefaultCommunicationScopes or Client::GetDefaultPresenceScopes which will include these scopes, respectively: `openid sdk.social_layer` or `openid sdk.social_layer_presence`
 `sdk.social_layer` and `sdk.social_layer_presence` automatically expand to include all the necessary scopes for the integration.
 You can pass in additional scopes if you need to, but as a general rule you should only request the scopes you actually need, and the user will need to grant access to those additional scopes as well.
</description>
		</method>
		<method name="SetClientId">
			<return type="void" />
			<param index="0" name="ClientId" type="int" />
			<description>
 Setter for DeviceAuthorizationArgs::ClientId.
</description>
		</method>
		<method name="SetScopes">
			<return type="void" />
			<param index="0" name="Scopes" type="String" />
			<description>
 Setter for DeviceAuthorizationArgs::Scopes.
</description>
		</method>
	</methods>
</class>
